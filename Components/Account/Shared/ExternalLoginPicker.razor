@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using SIMS.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager

@if (externalLogins.Length == 0)
{
    <div>
        <p>
            There are no external authentication services configured. See this <a href="https://go.microsoft.com/fwlink/?LinkID=532715">article
            about setting up this ASP.NET application to support logging in via external services</a>.
        </p>
    </div>
}
else
{
    <form class="form-horizontal" action="Account/PerformExternalLogin" method="post">
        <div>
            <AntiforgeryToken />
            <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
            <p>
                @foreach (var provider in externalLogins)
                {
                    <button type="submit" class="flex items-center justify-center w-full px-4 py-2 text-sm font-medium leading-5 text-gray-700 transition-colors duration-300 border border-gray-300 rounded-lg dark:text-gray-400 active:bg-transparent hover:border-purple-400 focus:border-gray-500 active:text-gray-500 focus:outline-none focus:shadow-outline-gray"
                            name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">
                        <svg class="w-4 h-4 mr-2"
                             aria-hidden="true"
                             viewBox="0 0 24 24"
                             fill="currentColor">
                            <img class="mr-2 block" src="../assets/img/google_icon.svg" alt="" style="width:6%; height:6%">
                        </svg>
                        Sign in with Google
                    </button>
                }
            </p>
        </div>
    </form>
}

@code {
    private AuthenticationScheme[] externalLogins = [];

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
    }
}
