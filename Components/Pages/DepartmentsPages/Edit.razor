@page "/departments/edit"

@using Microsoft.EntityFrameworkCore
@using SIMS.Models
@inject IDbContextFactory<SIMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<h2 class="my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200">
    Edit Departments
</h2>
<hr class="mb-4" />
@if (Departments is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Departments" OnValidSubmit="UpdateDepartments" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Departments.Id" value="@Departments.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Departments.Name" class="form-control" />
                    <ValidationMessage For="() => Departments.Name" class="text-danger" />
                </div>
                <div class="mt-3">
                <button type="submit" class="items-center px-4 py-2 text-sm font-medium text-white transition-colors duration-150 bg-purple-600 border border-transparent rounded-lg active:bg-purple-600 hover:bg-purple-700 focus:outline-none focus:shadow-outline-purple">
Save                </button> |
                <a href="/departments">Back to List</a>
                </div>
            </EditForm>
        </div>
    </div>
}



@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Departments? Departments { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Departments ??= await context.Departments.FirstOrDefaultAsync(m => m.Id == Id);

        if (Departments is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateDepartments()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Departments!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!DepartmentsExists(Departments!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/departments");
    }

    bool DepartmentsExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Departments.Any(e => e.Id == id);
    }
}
