@page "/departments/delete"

@using Microsoft.EntityFrameworkCore
@using SIMS.Models
@inject IDbContextFactory<SIMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager


<h2 class="my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200">
    Delete Departments
</h2>
<hr class="mb-4" />

<h3>Are you sure you want to delete this?</h3>

    @if (departments is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row mt-3">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@departments.Name</dd>
        </dl>
        <EditForm class="mt-3" method="post" Model="departments" OnValidSubmit="DeleteDepartments" FormName="delete" Enhance>
        <button type="submit" class="items-center px-4 py-2 text-sm font-medium text-white transition-colors duration-150 bg-purple-600 border border-transparent rounded-lg active:bg-purple-600 hover:bg-purple-700 focus:outline-none focus:shadow-outline-purple
                " disabled="@(departments is null)">
            Delete
        </button> |
        <a href="/departments">Back to List</a>
        |
        </EditForm>
    }

@code {
    Departments? departments;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        departments = await context.Departments.FirstOrDefaultAsync(m => m.Id == Id);

        if (departments is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteDepartments()
    {
        using var context = DbFactory.CreateDbContext();
        context.Departments.Remove(departments!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/departments");
    }
}
