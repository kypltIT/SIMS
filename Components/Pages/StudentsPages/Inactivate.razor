@page "/users/students/inactivate"

@using Microsoft.EntityFrameworkCore
@using SIMS.Data
@using SIMS.Models
@inject IDbContextFactory<SIMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Inactivate Student</PageTitle>



<h2 class="my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200 text-center">
    Inactivate/Activate Student
</h2>
<hr class="" />
<h3 class="my-3">Are you sure you want to change the status of this student?</h3>
<div>
    @if (student is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@($"{student.FirstName} {student.LastName}")</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Current Status</dt>
            <dd class="col-sm-10">@student.Status</dd>
        </dl>
        <EditForm method="post" Model="student" OnValidSubmit="ToggleStatus" FormName="toggleStatusForm" Enhance>
           <div>
            <button type="submit" class="items-center px-4 py-2 text-sm font-medium text-white transition-colors duration-150 bg-purple-600 border border-transparent rounded-lg active:bg-purple-600 hover:bg-purple-700 focus:outline-none focus:shadow-outline-purple">
Toggle Status               </button> |
            <a href="/users/students">Back to List</a>
            |
         </div>
        </EditForm>
    }
</div>

@code {
    private ApplicationUser? student;

    [SupplyParameterFromQuery]
    public string Id { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        student = await context.ApplicationUser.FirstOrDefaultAsync(s => s.Id == Id && s.Role == "Student");

        if (student is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task ToggleStatus()
    {
        if (student is not null)
        {
            student.Status = student.Status == "Active" ? "Inactive" : "Active";

            using var context = DbFactory.CreateDbContext();
            context.ApplicationUser.Update(student);
            await context.SaveChangesAsync();

            NavigationManager.NavigateTo("/users/students");
        }
    }
}
