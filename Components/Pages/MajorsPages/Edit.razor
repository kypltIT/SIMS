@page "/Majors/edit"

@using Microsoft.EntityFrameworkCore
@using SIMS.Models
@inject IDbContextFactory<SIMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h2 class="my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200">
    Edit Majors
</h2>
<hr />
<hr />
@if (Majors is null || Departments is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Majors" OnValidSubmit="UpdateMajors" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Majors.Id" value="@Majors.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Majors.Name" class="form-control" />
                    <ValidationMessage For="() => Majors.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="department" class="form-label">Department:</label>
                    <InputSelect id="department" @bind-Value="Majors.DepartmentId" class="form-control">
                        @foreach (var department in Departments)
                        {
                            <option value="@department.Id">@department.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Majors.DepartmentId" class="text-danger" />
                </div>

                <div class="mt-3">
                <button type="submit" class="items-center px-4 py-2 text-sm font-medium text-white transition-colors duration-150 bg-purple-600 border border-transparent rounded-lg active:bg-purple-600 hover:bg-purple-700 focus:outline-none focus:shadow-outline-purple">
Save                </button> |
                    <a href="/majors">Back to List</a>
                    |
                </div>
            </EditForm>
        </div>
    </div>
}


@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Majors? Majors { get; set; }

    public List<Departments>? Departments { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Majors ??= await context.Majors.FirstOrDefaultAsync(m => m.Id == Id);

        if (Majors is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        Departments = await context.Departments.ToListAsync();
    }

    public async Task UpdateMajors()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Majors!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!MajorsExists(Majors!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/majors");
    }

    bool MajorsExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Majors.Any(e => e.Id == id);
    }
}