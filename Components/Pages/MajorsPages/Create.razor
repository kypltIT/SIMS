@page "/majors/create"

@using Microsoft.EntityFrameworkCore
@using SIMS.Models
@inject IDbContextFactory<SIMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager


<h2 class="my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200">
    Create Majors 
</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Majors" OnValidSubmit="AddMajors" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="name" class="form-label">Name :</label>
                <InputText id="name" @bind-Value="Majors.Name" class="form-control" />
                <ValidationMessage For="() => Majors.Name" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="departmentid" class="form-label">Department :</label>
                <InputSelect id="departmentid" @bind-Value="Majors.DepartmentId" class="form-control">
                    @foreach (var department in Departments)
                    {
                        <option value="@department.Id">@department.Name</option>
                    }

                    <ValidationMessage For="() => Majors.DepartmentId" class="text-danger" />
                </InputSelect>
            </div>

            <button class="items-center px-4 py-2 text-sm font-medium text-white transition-colors duration-150 bg-purple-600 border border-transparent rounded-lg active:bg-purple-600 hover:bg-purple-700 focus:outline-none focus:shadow-outline-purple
    " href="/majors/create" type="submit">
                Create new
            </button> |
            <a href="/majors">Back to List</a>
            |
        </EditForm>
    </div>
</div>



@code {

    [SupplyParameterFromForm]
    public Majors Majors { get; set; } = new();
    public List<Departments> Departments { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Departments = await context.Departments.ToListAsync();
    }
    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddMajors()
    {
        using var context = DbFactory.CreateDbContext();
        context.Majors.Add(Majors);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/majors");
    }
}