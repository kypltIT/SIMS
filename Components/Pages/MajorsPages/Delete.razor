@page "/majors/delete"

@using Microsoft.EntityFrameworkCore
@using SIMS.Models
@inject IDbContextFactory<SIMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager


<PageTitle>Delete</PageTitle>

<h2 class="my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200">
    Deletes Majors
</h2>
<hr />
<h3>Are you sure you want to delete this?</h3>
<div>

    <hr />
    @if (majors is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Name :</dt>
            <dd class="col-sm-10">@majors.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Department :</dt>
            <dd class="col-sm-10">@majors.Department.Name</dd>
        </dl>
        <EditForm method="post" Model="majors" OnValidSubmit="DeleteMajors" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(majors is null)">Delete</button> |
            <a href="/majors">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Majors? majors;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        majors = await context.Majors.Include(m => m.Department).FirstOrDefaultAsync(m => m.Id == Id);

        if (majors is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteMajors()
    {
        using var context = DbFactory.CreateDbContext();
        context.Majors.Remove(majors!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/majors");
    }
}
