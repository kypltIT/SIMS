@page "/semesters/delete"

@using Microsoft.EntityFrameworkCore
@using SIMS.Models
@inject IDbContextFactory<SIMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager


<PageTitle>Delete</PageTitle>

<h2 class="my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200">
    Deletes Semesters
</h2>
<hr class="mb-4" />

<h3>Are you sure you want to delete this?</h3>

<div>

    @if (semesters is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@semesters.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">StartDate</dt>
            <dd class="col-sm-10">@semesters.StartDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">EndDate</dt>
            <dd class="col-sm-10">@semesters.EndDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Code</dt>
            <dd class="col-sm-10">@semesters.Code</dd>
        </dl>
        <EditForm method="post" Model="semesters" OnValidSubmit="DeleteSemesters" FormName="delete" Enhance>
            <button type="submit" class="items-center px-4 py-2 text-sm font-medium text-white transition-colors duration-150 bg-purple-600 border border-transparent rounded-lg active:bg-purple-600 hover:bg-purple-700 focus:outline-none focus:shadow-outline-purple
                    " disabled="@(semesters is null)">
                Delete
            </button> |
            <a href="/Semesters">Back to List</a>
            |
        </EditForm>
    }
</div>

@code {
    Semesters? semesters;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        semesters = await context.Semesters.FirstOrDefaultAsync(m => m.Id == Id);

        if (semesters is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteSemesters()
    {
        using var context = DbFactory.CreateDbContext();
        context.Semesters.Remove(semesters!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/semesters");
    }
}
