@page "/dashboard"
@inherits LayoutComponentBase
@implements IDisposable

@using SIMS.Data
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using SIMS.Models

@inject IDbContextFactory<SIMS.Data.ApplicationDbContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SignInManager<ApplicationUser> SignInManager


@* Admin Layout *@
@if (isAdmin)
{
			<h2 class="my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200">
				Dashboard
			</h2>
	<div class="grid gap-6 mb-8 md:grid-cols-2 xl:grid-cols-4">
		<!-- Card -->
		<div class="flex items-center p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800">
			<div class="p-3 mr-4 text-orange-500 bg-orange-100 rounded-full dark:text-orange-100 dark:bg-orange-500">
				<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
					<path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3zM6 8a2 2 0 11-4 0 2 2 0 014 0zM16 18v-3a5.972 5.972 0 00-.75-2.906A3.005 3.005 0 0119 15v3h-3zM4.75 12.094A5.973 5.973 0 004 15v3H1v-3a3 3 0 013.75-2.906z"></path>
				</svg>
			</div>
			<div>
				<p class="mb-2 text-sm font-medium text-gray-600 dark:text-gray-400">
					Total users
				</p>
				<p class="text-lg font-semibold text-gray-700 dark:text-gray-200">
					@Users.Count		
					</p>
			</div>
		</div>
		<!-- Card -->
		<div class="flex items-center p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800">
			<div class="p-3 mr-4 text-green-500 bg-green-100 rounded-full dark:text-green-100 dark:bg-green-500">
				<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
					<path fill-rule="evenodd" d="M4 4a2 2 0 00-2 2v4a2 2 0 002 2V6h10a2 2 0 00-2-2H4zm2 6a2 2 0 012-2h8a2 2 0 012 2v4a2 2 0 01-2 2H8a2 2 0 01-2-2v-4zm6 4a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
				</svg>
			</div>
			<div>
				<p class="mb-2 text-sm font-medium text-gray-600 dark:text-gray-400">
					Total courses
				</p>
				<p class="text-lg font-semibold text-gray-700 dark:text-gray-200">
					@Courses.Count	
				</p>
			</div>
		</div>

		<!-- Card -->
		<div class="flex items-center p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800">
			<div class="p-3 mr-4 text-teal-500 bg-teal-100 rounded-full dark:text-teal-100 dark:bg-teal-500">
				<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
					<path fill-rule="evenodd" d="M18 5v8a2 2 0 01-2 2h-5l-5 4v-4H4a2 2 0 01-2-2V5a2 2 0 012-2h12a2 2 0 012 2zM7 8H5v2h2V8zm2 0h2v2H9V8zm6 0h-2v2h2V8z" clip-rule="evenodd"></path>
				</svg>
			</div>
			<div>
				<p class="mb-2 text-sm font-medium text-gray-600 dark:text-gray-400">
					Pending contacts
				</p>
				<p class="text-lg font-semibold text-gray-700 dark:text-gray-200">
					0
				</p>
			</div>
		</div>

		<!-- Card -->
		<div class="flex items-center p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800">
			<div class="p-3 mr-4 text-blue-500 bg-blue-100 rounded-full dark:text-blue-100 dark:bg-blue-500">
				<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
					<path d="M3 1a1 1 0 000 2h1.22l.305 1.222a.997.997 0 00.01.042l1.358 5.43-.893.892C3.74 11.846 4.632 14 6.414 14H15a1 1 0 000-2H6.414l1-1H14a1 1 0 00.894-.553l3-6A1 1 0 0017 3H6.28l-.31-1.243A1 1 0 005 1H3zM16 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM6.5 18a1.5 1.5 0 100-3 1.5 1.5 0 000 3z"></path>
				</svg>
			</div>
			<div>
				<p class="mb-2 text-sm font-medium text-gray-600 dark:text-gray-400">
					Coming Soon
				</p>
				<p class="text-lg font-semibold text-gray-700 dark:text-gray-200">
					0
				</p>
			</div>
		</div>
	</div>



	<h3 class="mb-3 font-semibold text-center">List of Students</h3>
	<table class="table table-bordered">
		<thead>
			<tr>
				<th class="text-center">No</th>
				<th class="text-center">Code</th>
				<th class="text-center">First Name</th>
				<th class="text-center">Last Name</th>
				<th class="text-center">Email</th>
				<th class="text-center">Intial Admission Course</th>
				<th class="text-center">Status</th>
			</tr>
		</thead>
		<tbody>
			@if (Users != null && Users.Count > 0)
			{
				int i = 1;
				@foreach (var student in Users)
				{
					<tr>
						<td class="text-center">@i</td>
						<td class="text-center">@student.Code</td>
						<td class="text-center">@student.FirstName</td>
						<td class="text-center">@student.LastName</td>
						<td class="text-center">@student.Email</td>
						<td class="text-center">@student.IntialAdmissionCourse</td>
						<td class="text-center">@student.Status</td>
					</tr>
					i++;
				}
			}
			else
			{
				<tr>
					<td colspan="6" class="text-center">No data!</td>
				</tr>
			}
		</tbody>
	</table>
}

@* Student Layout *@
@if (isStudent)
{
	<main class="h-full overflow-y-auto">
		<div class="container px-16 mx-auto grid">

			<!-- CTA -->
			<div class="my-6 text-xl font-semibold flex items-center justify-between p-4 text-sm font-semibold text-purple-100 bg-purple-600 rounded-lg shadow-md">
				My Course
			</div>
			@if (Courses != null && Courses.Any())
			{
				<table class="table table-bordered">
					<thead>
						<tr>
							<th>Course Name</th>
							<th>Start Date</th>
							<th>End Date</th>
							<th>Semester</th>
							<th>Lecturer</th>
							<th>Subject</th>
							<th>Grade</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var course in StudentCourses)
						{
							<tr>
								<td>@course.Course.Name</td>
								<td>@course.Course.StartDate.ToShortDateString()</td>
								<td>@course.Course.EndDate.ToShortDateString()</td>
								<td>@course.Course.Semester.Name</td>
								<td>@course.Course.Lecturer.FirstName + @course.Course.Lecturer.LastName</td>
								<td>@course.Course.Subject.Name</td>
								<td>@(string.IsNullOrEmpty(course.Grade) ? "Not graded" : course.Grade)</td>
							</tr>
						}
					</tbody>
				</table>
			}
			else
			{
				<p><em>No courses available.</em></p>
			}
			
		</div>

	</main>
}

@* Lecturer Layout *@
@if (isLecturer)
{
	<main class="h-full overflow-y-auto">
		<div class="container px-16 mx-auto grid">

			<!-- CTA -->
			<div class="my-6 text-xl font-semibold flex items-center justify-between p-4 text-sm font-semibold text-purple-100 bg-purple-600 rounded-lg shadow-md">
				My Course
			</div>

			<table class="table">
				<thead>
					<tr>
						<th>Course Name</th>
						<th>Start Date</th>
						<th>End Date</th>
						<th>Semester</th>
						<th>Lecturer</th>
						<th>Subject</th>
						<th>Actions</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var course in Courses)
					{
						<tr>
							<td>@course.Name</td>
							<td>@course.StartDate.ToShortDateString()</td>
							<td>@course.EndDate.ToShortDateString()</td>
							<td>@course.Semester.Name</td>
							<td>@course.Lecturer.FirstName @course.Lecturer.LastName</td>
							<td>@course.Subject.Name</td>
							<td>
								
								
									<a href="@($"-courses/details ? id ={ course.Id}")"> <i class="fa-solid fa-circle-info"></i></a>
									<br />
						
								<a href="@($"-courses/grade?id={course.Id}")" class="ms-3">Add Grades</a>

							</td>
						</tr>
					}
				</tbody>
			</table>

		</div>
	</main>
} 
@code {
	private string? currentUrl;

	private string activeLink;

	private bool isStudent;
	private bool isAdmin;
	private bool isLecturer;


	public List<ApplicationUser> Users { get; set; } = new();

	public List<StudentCourses> StudentCourses { get; set; } = new();
	string? studentId;


	private List<Courses> Courses { get; set; } = new List<Courses>();
	private bool IsAdmin { get; set; }

	protected override async Task OnInitializedAsync()
	{

		studentId = SIMS.Components.Layout.NavMenu.userId;


		using var context = DbFactory.CreateDbContext();

		// Retrieve Courses for the current student
		Courses = await context.Courses
			.Include(m => m.Semester)
			.Include(m => m.Subject)
			.Include(m => m.Lecturer)
			.ToListAsync();

		// Retrieve StudentCourses for the current student
		StudentCourses = await context.StudentCourses
									.Where(sc => sc.StudentId == studentId)
									.Include(sc => sc.Course)
										.ThenInclude(c => c.Semester)
									.Include(sc => sc.Course)
										.ThenInclude(c => c.Subject)
									.Include(sc => sc.Course)
										.ThenInclude(c => c.Lecturer)
									.ToListAsync();

		Users = await context.Users
											.Where(sc => sc.Role == "Student")

.ToListAsync();




		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		int totalUsers = await context.Users.CountAsync();
		int totalCourses = await context.Courses.CountAsync();

		// Check if the user is in the "Student" role
		isStudent = user.Claims.Any(c => c.Type == "Role" && c.Value == "Student");
		isAdmin = user.Claims.Any(c => c.Type == "Role" && c.Value == "Admin");
		isLecturer = user.Claims.Any(c => c.Type == "Role" && c.Value == "Lecturer");




		// Initialize the active link based on the current URL
		currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
		activeLink = NavigationManager.Uri;
		NavigationManager.LocationChanged += OnLocationChanged;
	}




	private void SetActive(string link)
	{
		activeLink = link;
	}

	private bool IsActive(string link)
	{
		// Check if the current active link matches the provided link
		return activeLink.Contains(link);
	}

	private void OnLocationChanged(object sender, LocationChangedEventArgs e)
	{
		// Update the active link when the location changes
		currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
		activeLink = e.Location;
		StateHasChanged();
	}

	public void Dispose()
	{
		// Unsubscribe from the event when the component is disposed
		NavigationManager.LocationChanged -= OnLocationChanged;
	}
}
