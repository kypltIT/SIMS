@page "/dashboard"
@inherits LayoutComponentBase
@implements IDisposable

@using SIMS.Data
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using SIMS.Models

@inject IDbContextFactory<SIMS.Data.ApplicationDbContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SignInManager<ApplicationUser> SignInManager


@* Admin Layout *@
@if (isAdmin)
{
	<PageTitle>Admin Dashboard</PageTitle>

			<h2 class="my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200">
				Dashboard
			</h2>
			<!-- Graphic Image -->
			<div class="bg-white p-6 rounded-lg shadow-lg mb-6">
				<img src="https://static.vecteezy.com/system/resources/previews/004/154/417/original/teamwork-or-team-building-office-business-meeting-conference-and-brainstorming-annual-report-and-statistics-graphics-discussion-and-planning-in-flat-style-free-vector.jpg" alt="Dashboard Graphic" class="w-full h-auto rounded-lg" style="width: 50%; height:50%"/>
			</div>

			<!-- Welcome Text -->
			<div class="text-lg text-gray-800">
				<p class="mb-4">Welcome to the admin dashboard. Here you can oversee and manage the various aspects of the application effectively.</p>
				<p class="mb-4">Use the navigation menu to access different sections of the dashboard, including user management, course oversight, and reports.</p>
			</div>
}

@* Student Layout *@
@if (isStudent)
{
	<main class="h-full overflow-y-auto">
		<div class="container px-16 mx-auto grid">

			<!-- CTA -->
			<div class="my-6 text-xl font-semibold flex items-center justify-between p-4 text-sm font-semibold text-purple-100 bg-purple-600 rounded-lg shadow-md">
				My Course
			</div>
			@if (Courses != null && Courses.Any())
			{
				<table class="table table-bordered">
					<thead>
						<tr>
							<th>Course Name</th>
							<th>Start Date</th>
							<th>End Date</th>
							<th>Semester</th>
							<th>Lecturer</th>
							<th>Subject</th>
							<th>Grade</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var course in StudentCourses)
						{
							<tr>
								<td>@course.Course.Name</td>
								<td>@course.Course.StartDate.ToShortDateString()</td>
								<td>@course.Course.EndDate.ToShortDateString()</td>
								<td>@course.Course.Semester.Name</td>
								<td>@course.Course.Lecturer.FirstName + @course.Course.Lecturer.LastName</td>
								<td>@course.Course.Subject.Name</td>
								<td>@(string.IsNullOrEmpty(course.Grade) ? "Not graded" : course.Grade)</td>
							</tr>
						}
					</tbody>
				</table>
			}
			else
			{
				<p><em>No courses available.</em></p>
			}
			
		</div>

	</main>
}

@* Lecturer Layout *@
@if (isLecturer)
{
	<main class="h-full overflow-y-auto">
		<div class="container px-16 mx-auto grid">

			<!-- CTA -->
			<div class="my-6 text-xl font-semibold flex items-center justify-between p-4 text-sm font-semibold text-purple-100 bg-purple-600 rounded-lg shadow-md">
				My Course
			</div>

			<table class="table">
				<thead>
					<tr>
						<th>Course Name</th>
						<th>Start Date</th>
						<th>End Date</th>
						<th>Semester</th>
						<th>Lecturer</th>
						<th>Subject</th>
						<th>Actions</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var course in Courses)
					{
						<tr>
							<td>@course.Name</td>
							<td>@course.StartDate.ToShortDateString()</td>
							<td>@course.EndDate.ToShortDateString()</td>
							<td>@course.Semester.Name</td>
							<td>@course.Lecturer.FirstName @course.Lecturer.LastName</td>
							<td>@course.Subject.Name</td>
							<td>
								
								
									<a href="@($"-courses/details ? id ={ course.Id}")"> <i class="fa-solid fa-circle-info"></i></a>
									<br />
						
								<a href="@($"-courses/grade?id={course.Id}")" class="ms-3">Add Grades</a>

							</td>
						</tr>
					}
				</tbody>
			</table>

		</div>
	</main>
} 
@code {
	private string? currentUrl;

	private string activeLink;

	private bool isStudent;
	private bool isAdmin;
	private bool isLecturer;

	public List<StudentCourses> StudentCourses { get; set; } = new();
	string? studentId;

	private List<Courses> Courses { get; set; } = new List<Courses>();
	private bool IsAdmin { get; set; }

	protected override async Task OnInitializedAsync()
	{
		studentId = SIMS.Components.Layout.NavMenu.userId;


		using var context = DbFactory.CreateDbContext();

		// Retrieve Courses for the current student
		Courses = await context.Courses
			.Include(m => m.Semester)
			.Include(m => m.Subject)
			.Include(m => m.Lecturer)
			.ToListAsync();

		// Retrieve StudentCourses for the current student
		StudentCourses = await context.StudentCourses
									.Where(sc => sc.StudentId == studentId)
									.Include(sc => sc.Course)
										.ThenInclude(c => c.Semester)
									.Include(sc => sc.Course)
										.ThenInclude(c => c.Subject)
									.Include(sc => sc.Course)
										.ThenInclude(c => c.Lecturer)
									.ToListAsync();

		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		// Check if the user is in the "Student" role
		isStudent = user.Claims.Any(c => c.Type == "Role" && c.Value == "Student");
		isAdmin = user.Claims.Any(c => c.Type == "Role" && c.Value == "Admin");
		isLecturer = user.Claims.Any(c => c.Type == "Role" && c.Value == "Lecturer");




		// Initialize the active link based on the current URL
		currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
		activeLink = NavigationManager.Uri;
		NavigationManager.LocationChanged += OnLocationChanged;
	}




	private void SetActive(string link)
	{
		activeLink = link;
	}

	private bool IsActive(string link)
	{
		// Check if the current active link matches the provided link
		return activeLink.Contains(link);
	}

	private void OnLocationChanged(object sender, LocationChangedEventArgs e)
	{
		// Update the active link when the location changes
		currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
		activeLink = e.Location;
		StateHasChanged();
	}

	public void Dispose()
	{
		// Unsubscribe from the event when the component is disposed
		NavigationManager.LocationChanged -= OnLocationChanged;
	}
}
