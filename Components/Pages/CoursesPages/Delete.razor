@page "/-courses/deactivate/{Id:int}"

@using Microsoft.EntityFrameworkCore
@using SIMS.Models
@inject IDbContextFactory<SIMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Deactivate</PageTitle>

<h1>Deactivate Course</h1>

@if (course is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        <h4>Are you sure you want to change the status of this course?</h4>
        <hr />
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@course.Name</dd>
            <dt class="col-sm-2">Code</dt>
            <dd class="col-sm-10">@course.Code</dd>
            <dt class="col-sm-2">Status</dt>
            <dd class="col-sm-10">@course.Status</dd>
        </dl>

        <EditForm method="post" Model="course" OnValidSubmit="ToggleCourseStatus" FormName="deactivate">
            <button type="submit" class="btn btn-warning">
                @if (course.Status == "Active")
                {
                    <span>Inactivate</span>
                }
                else
                {
                    <span>Activate</span>
                }
            </button>
            <a href="/-courses" class="btn btn-secondary">Back to List</a>
        </EditForm>
    </div>
}

@code {
    private Courses? course;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        course = await context.Courses.FindAsync(Id);

        if (course == null)
        {
            NavigationManager.NavigateTo("/notfound");
        }
    }

    private async Task ToggleCourseStatus()
    {
        if (course != null)
        {
            using var context = DbFactory.CreateDbContext();
            course.Status = course.Status == "Active" ? "Inactive" : "Active";
            context.Courses.Update(course);
            await context.SaveChangesAsync();

            NavigationManager.NavigateTo("/-courses");
        }
    }
}
