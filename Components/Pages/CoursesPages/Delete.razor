@page "/-courses/delete"

@using Microsoft.EntityFrameworkCore
@using SIMS.Models
@inject IDbContextFactory<SIMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager


<PageTitle>Delete</PageTitle>

<h2 class="my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200">
    Delete Departments
</h2>
<hr class="mb-4" />
<h3>Are you sure you want to delete this?</h3>
<div>
   
    @if (courses is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@courses.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">StartDate</dt>
            <dd class="col-sm-10">@courses.StartDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">EndDate</dt>
            <dd class="col-sm-10">@courses.EndDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Semester</dt>
            <dd class="col-sm-10">@courses.Semester.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Lecture</dt>
            <dd class="col-sm-10">@courses.Lecturer.FirstName @courses.Lecturer.LastName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Subject</dt>
            <dd class="col-sm-10">@courses.Subject.Name</dd>
        </dl>
        <EditForm method="post" Model="courses" OnValidSubmit="DeleteCourses" FormName="delete" Enhance>
            <button type="submit" class="items-center px-4 py-2 text-sm font-medium text-white transition-colors duration-150 bg-purple-600 border border-transparent rounded-lg active:bg-purple-600 hover:bg-purple-700 focus:outline-none focus:shadow-outline-purple
                    " disabled="@(courses is null)">
                Delete
            </button> |
            <a href="/-courses">Back to List</a>
            |
        </EditForm>
    }
</div>

@code {
    Courses? courses;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        courses = await context.Courses.Include(m => m.Semester).Include(m => m.Subject).Include(m => m.Lecturer).FirstOrDefaultAsync(m => m.Id == Id);

        if (courses is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteCourses()
    {
        using var context = DbFactory.CreateDbContext();
        context.Courses.Remove(courses!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/courses");
    }
}