@page "/-courses/edit"

@using Microsoft.EntityFrameworkCore
@using SIMS.Models
@using SIMS.Data
@inject IDbContextFactory<SIMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<h1 class="my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200">
    Edit Courses
</h1>
<hr class="mb-2" style="" />

@if (Courses is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        <div class="row">
            <EditForm method="post" Model="Courses" OnValidSubmit="UpdateCourses" FormName="edit" Enhance>

            <!-- Left Column: Form -->
            <div class="col-md-6">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <input type="hidden" name="Courses.Id" value="@Courses.Id" />
                    <div class="mb-3">
                        <label for="name" class="form-label">Name:</label>
                        <InputText id="name" @bind-Value="Courses.Name" class="form-control" />
                        <ValidationMessage For="() => Courses.Name" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="startdate" class="form-label">StartDate:</label>
                        <InputDate id="startdate" @bind-Value="Courses.StartDate" class="form-control" />
                        <ValidationMessage For="() => Courses.StartDate" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="enddate" class="form-label">EndDate:</label>
                        <InputDate id="enddate" @bind-Value="Courses.EndDate" class="form-control" />
                        <ValidationMessage For="() => Courses.EndDate" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="semesterid" class="form-label">Semester:</label>
                        <InputSelect id="semesterid" @bind-Value="Courses.SemesterId" class="form-control">
                            @foreach (var semester in Semesters)
                            {
                                <option value="@semester.Id">@semester.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => Courses.SemesterId" class="text-danger" />
                    </div>
            </div>

            <!-- Right Column: Optional Additional Content -->
            <div class="col-md-6">
                <div class="mb-3">
                    <label for="lectureid" class="form-label">Lecturer:</label>
                    <InputSelect id="lectureid" @bind-Value="Courses.LecturerId" class="form-control">
                        @foreach (var lecture in Lecturers)
                        {
                            <option value="@lecture.Id">@lecture.FirstName @lecture.LastName</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Courses.LecturerId" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="subjectid" class="form-label">Subject:</label>
                    <InputSelect id="subjectid" @bind-Value="Courses.SubjectId" class="form-control">
                        @foreach (var subject in Subjects)
                        {
                            <option value="@subject.Id">@subject.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Courses.SubjectId" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="code" class="form-label">Code:</label>
                    <InputText id="code" @bind-Value="Courses.Code" class="form-control" />
                    <ValidationMessage For="() => Courses.Code" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="status" class="form-label">Status:</label>
                    <InputText id="status" @bind-Value="Courses.Status" class="form-control" />
                    <ValidationMessage For="() => Courses.Status" class="text-danger" />
                </div>
            </div>
            

                    <div class="mt-3">
                        <button type="submit" class="items-center px-4 py-2 text-sm font-medium text-white transition-colors duration-150 bg-orange-600 border border-transparent rounded-lg active:bg-orange-600 hover:bg-orange-700 focus:outline-none focus:shadow-outline-orange">
                            Save
                        </button>
                        |
                        <a href="/-courses">Back to List</a>
                        |
                    </div>
                </EditForm>
        </div>
    </div>
}

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Courses? Courses { get; set; }
    public List<ApplicationUser> Lecturers { get; set; } = new();
    public List<Semesters> Semesters { get; set; } = new();
    public List<Subjects> Subjects { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Courses ??= await context.Courses.FirstOrDefaultAsync(m => m.Id == Id);

        Lecturers = await context.ApplicationUser.ToListAsync();
        Semesters = await context.Semesters.ToListAsync();
        Subjects = await context.Subjects.ToListAsync();
        if (Courses is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task UpdateCourses()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Courses!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CoursesExists(Courses!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/courses");
    }

    bool CoursesExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Courses.Any(e => e.Id == id);
    }
}
