@page "/-courses"

@using Microsoft.EntityFrameworkCore
@using SIMS.Models
@inject IDbContextFactory<SIMS.Data.ApplicationDbContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Courses</PageTitle>
<h2 class="my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200">
    Courses
</h2>
<hr class="mb-3" />
<a class="items-center px-4 py-2 text-sm font-medium text-white transition-colors duration-150 bg-purple-600 border border-transparent rounded-lg active:bg-purple-600 hover:bg-purple-700 focus:outline-none focus:shadow-outline-purple
    " href="-courses/create">
    Create new
    <span class="ml-2" aria-hidden="true">+</span>
</a>
<a class="items-center px-4 py-2 text-sm font-medium text-white transition-colors duration-150 bg-purple-600 border border-transparent rounded-lg active:bg-purple-600 hover:bg-purple-700 focus:outline-none focus:shadow-outline-purple
    " href="-courses/import">
    Import
    <span class="ml-2" aria-hidden="true">+</span>
</a>
<table class="table">
    <thead>
        <tr>
            <th>Course Name</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Semester</th>
            <th>Lecturer</th>
            <th>Subject</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var course in Courses)
        {
            <tr>
                <td>@course.Name</td>
                <td>@course.StartDate.ToShortDateString()</td>
                <td>@course.EndDate.ToShortDateString()</td>
                <td>@course.Semester.Name</td>
                <td>@course.Lecturer.FirstName @course.Lecturer.LastName</td>
                <td>@course.Subject.Name</td>
                <td>
                    @if (SIMS.Components.Layout.NavMenu.isAdmin)
                    {
                        <a href="@($"-courses/edit?id={course.Id}")"><i class="fa-solid fa-pen-to-square"></i></a>
                        <a href="@($"-courses/details ? id ={ course.Id}")"> <i class="fa-solid fa-circle-info"></i></a>
                        <a href="@($"-courses/delete? id = {course.Id}")"><i class="fa-solid fa-trash"></i></a>
                        <br />
                    }
                    <a href="@($"-courses/assign?id={course.Id}")">Assign students</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<Courses> Courses { get; set; } = new List<Courses>();
    private bool IsAdmin { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();

        Courses = await context.Courses
            .Include(m => m.Semester)
            .Include(m => m.Subject)
            .Include(m => m.Lecturer)
            .ToListAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        IsAdmin = user.Claims.Any(c => c.Type == "Role" && c.Value == "Admin");
    }
}