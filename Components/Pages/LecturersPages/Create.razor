@page "/users/lecturers/create"

@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@using Microsoft.EntityFrameworkCore
@using SIMS.Data
@using SIMS.Models
@using System.ComponentModel.DataAnnotations
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.WebUtilities
@using System.Text
@using System.Text.Encodings.Web
@inject IUserStore<ApplicationUser> UserStore
@inject IDbContextFactory<SIMS.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization
@inject UserManager<SIMS.Data.ApplicationUser> UserManager

<h2 class="my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200">
    Create Lecturer
</h2>
<hr class="mb-4" />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Lecturer" OnValidSubmit="AddLecturer" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3">
                <label for="firstName" class="form-label">First Name:</label>
                <InputText id="firstName" @bind-Value="Lecturer.FirstName" class="form-control" />
                <ValidationMessage For="() => Lecturer.FirstName" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="lastName" class="form-label">Last Name:</label>
                <InputText id="lastName" @bind-Value="Lecturer.LastName" class="form-control" />
                <ValidationMessage For="() => Lecturer.LastName" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="phoneNumber" class="form-label">Phone Number:</label>
                <InputText id="phoneNumber" @bind-Value="Lecturer.PhoneNumber" class="form-control" />
                <ValidationMessage For="() => Lecturer.PhoneNumber" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="email" class="form-label">Email:</label>
                <InputText id="email" @bind-Value="Lecturer.Email" class="form-control" />
                <ValidationMessage For="() => Lecturer.Email" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password:</label>
                <InputText id="password" @bind-Value="Lecturer.PasswordHash" class="form-control" />
                <ValidationMessage For="() => Lecturer.PasswordHash" class="text-danger" />
            </div>
            <button class="items-center px-4 py-2 text-sm font-medium text-white transition-colors duration-150 bg-purple-600 border border-transparent rounded-lg active:bg-purple-600 hover:bg-purple-700 focus:outline-none focus:shadow-outline-purple
    " href="/departments/create">
                Create new
            </button> |
            <a href="/departments">Back to List</a>
            |
        </EditForm>
    </div>
</div>



@code {
    [SupplyParameterFromForm]
    public ApplicationUser Lecturer { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        // Initialize default values
        Lecturer.Code = await GenerateNextLecturerCodeAsync();
        Lecturer.IntialAdmissionCourse = "K1";
        Lecturer.Status = "Active";
        Lecturer.Role = "Lecturer";
    }

    private async Task AddLecturer()
    {
        var passwordHasher = new Microsoft.AspNetCore.Identity.PasswordHasher<Microsoft.AspNetCore.Identity.IdentityUser>();

        using var context = DbFactory.CreateDbContext();

        // Ensure Lecturer properties are correctly set
        SIMS.Data.ApplicationUser lecturerToAdd = new Data.ApplicationUser
            {
                UserName = Lecturer.Code, // UserName typically matches Email for Identity users
                Email = Lecturer.Email,
                FirstName = Lecturer.FirstName,
                LastName = Lecturer.LastName,
                PhoneNumber = Lecturer.PhoneNumber,
                Code = Lecturer.Code,
                IntialAdmissionCourse = Lecturer.IntialAdmissionCourse,
                Status = Lecturer.Status,
                Role = Lecturer.Role,
                PasswordHash = Lecturer.PasswordHash,
                NormalizedEmail = Lecturer.Email.ToUpper(),
                NormalizedUserName = Lecturer.Code.ToUpper(),
                LockoutEnabled = true

            };
        await UserStore.SetUserNameAsync(lecturerToAdd, Lecturer.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(lecturerToAdd, Lecturer.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(lecturerToAdd, Lecturer.PasswordHash);
        NavigationManager.NavigateTo("/users/lecturers");
    }


    private async Task<string> GenerateNextLecturerCodeAsync()
    {
        // Retrieve the last lecturer code from the database
        var lastLecturer = await DbFactory.CreateDbContext().Users
            .Where(l => l.Code.StartsWith("LT"))
            .OrderByDescending(l => l.Code)
            .FirstOrDefaultAsync();

        string newLecturerCode;
        if (lastLecturer == null)
        {
            // No lecturer found, start with LT00001
            newLecturerCode = "LT00001";
        }
        else
        {
            // Extract the numeric part of the last lecturer code
            int lastCodeNumber = int.Parse(lastLecturer.Code.Substring(2));
            // Increment by 1
            newLecturerCode = $"LT{(lastCodeNumber + 1).ToString("D5")}";
        }

        return newLecturerCode;
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }
}
